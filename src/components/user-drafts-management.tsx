'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { 
    Dialog, 
    DialogContent, 
    DialogDescription, 
    DialogFooter, 
    DialogHeader, 
    DialogTitle 
} from '@/components/ui/dialog';
import { 
    Sheet, 
    SheetContent, 
    SheetHeader, 
    SheetTitle 
} from '@/components/ui/sheet';
import { Separator } from '@/components/ui/separator';
import { 
    Edit, 
    Trash2, 
    Calendar, 
    FileText, 
    Loader2, 
    RefreshCw,
    Save,
    Send,
    X
} from 'lucide-react';
import {
    RiArrowDownSLine,
    RiCheckLine,
    RiSearchLine,
} from '@remixicon/react';
import { toast } from 'sonner';
import { MarkdownEditor } from '@/components/markdown-editor';
import { EnhancedLoading, ContentTransition, ListItemTransition } from '@/components/enhanced-loading';
import token from '@/utils/userToken';
import lang from '@/lib/lang';

type Draft = {
    id: number;
    title: string;
    titleENUS?: string | null;
    titleZHCN?: string | null;
    titleZHTW?: string | null;
    titleESES?: string | null;
    titleFRFR?: string | null;
    titleRURU?: string | null;
    titleJAJP?: string | null;
    titleKOKR?: string | null;
    titleDEDE?: string | null;
    titlePTBR?: string | null;
    origin: string;
    createdAt: string;
    updatedAt: string;
    published: boolean;
    pin: boolean;
    originLang: string | null;
    topics: {
        name: string;
        emoji: string;
        nameZHCN?: string | null;
        nameENUS?: string | null;
        nameZHTW?: string | null;
        nameESES?: string | null;
        nameFRFR?: string | null;
        nameRURU?: string | null;
        nameJAJP?: string | null;
        nameDEDE?: string | null;
        namePTBR?: string | null;
        nameKOKR?: string | null;
    }[];
};

interface UserDraftsManagementProps {
    locale: string;
}

export function UserDraftsManagement({ locale }: UserDraftsManagementProps) {
    const [drafts, setDrafts] = useState<Draft[]>([]);
    const [loading, setLoading] = useState(true);
    const [loadingMore, setLoadingMore] = useState(false);
    const [hasMore, setHasMore] = useState(true);
    const [currentPage, setCurrentPage] = useState(1);
    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
    const [editDialogOpen, setEditDialogOpen] = useState(false);
    const [draftToDelete, setDraftToDelete] = useState<Draft | null>(null);
    const [draftToEdit, setDraftToEdit] = useState<Draft | null>(null);
    const [deletingDrafts, setDeletingDrafts] = useState<Set<number>>(new Set());
    const [savingDraft, setSavingDraft] = useState(false);
    const [publishingDraft, setPublishingDraft] = useState(false);
    const observerRef = useRef<IntersectionObserver | null>(null);
    const lastDraftRef = useRef<HTMLDivElement>(null);
    
    // ÁºñËæëË°®ÂçïÁä∂ÊÄÅ
    const [editTitle, setEditTitle] = useState('');
    const [editContent, setEditContent] = useState('');
    const [selectedTopic, setSelectedTopic] = useState('');
    const [selectedTopicName, setSelectedTopicName] = useState('');
    const [topicDialogOpen, setTopicDialogOpen] = useState(false);
    const [topicSearchQuery, setTopicSearchQuery] = useState('');

    // Ê®°Êãü‰∏ªÈ¢òÊï∞ÊçÆ - ÂÆûÈôÖÈ°πÁõÆ‰∏≠Â∫îËØ•‰ªé API Ëé∑Âèñ
    const topics = [
        {
            title: 'ÊäÄÊúØËÆ®ËÆ∫',
            items: [
                { icon: 'üíª', title: 'ÁºñÁ®ãÊäÄÊúØ', name: 'programming' },
                { icon: 'üîß', title: 'Â∑•ÂÖ∑ËΩØ‰ª∂', name: 'tools' },
                { icon: 'üåê', title: 'ÁΩëÁªúÊäÄÊúØ', name: 'network' },
            ]
        },
        {
            title: 'ÁîüÊ¥ªÂàÜ‰∫´',
            items: [
                { icon: 'üéÆ', title: 'Ê∏∏ÊàèÂ®±‰πê', name: 'gaming' },
                { icon: 'üìö', title: 'Â≠¶‰π†ÂøÉÂæó', name: 'learning' },
                { icon: 'üé®', title: 'ÂàõÊÑèËÆæËÆ°', name: 'design' },
            ]
        }
    ];

    // Ëé∑ÂèñÊâÄÊúâ‰∏ªÈ¢òÈÄâÈ°π
    const getAllTopics = () => {
        const allTopics: Array<{ display: string; name: string }> = [];
        topics.forEach((topic) => {
            if (topic.items) {
                topic.items.forEach((item) => {
                    allTopics.push({
                        display: item.icon + ' ' + item.title,
                        name: item.name,
                    });
                });
            }
        });
        return allTopics;
    };

    // ËøáÊª§‰∏ªÈ¢òÈÄâÈ°π
    const getFilteredTopics = () => {
        const allTopics = getAllTopics();
        if (!topicSearchQuery.trim()) {
            return allTopics;
        }
        return allTopics.filter((topic) =>
            topic.display.toLowerCase().includes(topicSearchQuery.toLowerCase()),
        );
    };

    // ÈÄâÊã©‰∏ªÈ¢ò
    const handleTopicSelect = (topicName: string, topicDisplay: string) => {
        setSelectedTopic(topicDisplay);
        setSelectedTopicName(topicName);
        setTopicDialogOpen(false);
        setTopicSearchQuery('');
    };

    const getLocalizedTitle = (draft: Draft): string => {
        const titleMap: Record<string, string | null | undefined> = {
            'zh-CN': draft.titleZHCN,
            'en-US': draft.titleENUS,
            'zh-TW': draft.titleZHTW,
            'es-ES': draft.titleESES,
            'fr-FR': draft.titleFRFR,
            'ru-RU': draft.titleRURU,
            'ja-JP': draft.titleJAJP,
            'de-DE': draft.titleDEDE,
            'pt-BR': draft.titlePTBR,
            'ko-KR': draft.titleKOKR,
        };
        return titleMap[locale] || draft.title;
    };

    const getLocalizedTopicName = (topic: Draft['topics'][0]): string => {
        const nameMap: Record<string, string | null | undefined> = {
            'zh-CN': topic.nameZHCN,
            'en-US': topic.nameENUS,
            'zh-TW': topic.nameZHTW,
            'es-ES': topic.nameESES,
            'fr-FR': topic.nameFRFR,
            'ru-RU': topic.nameRURU,
            'ja-JP': topic.nameJAJP,
            'de-DE': topic.nameDEDE,
            'pt-BR': topic.namePTBR,
            'ko-KR': topic.nameKOKR,
        };
        return nameMap[locale] || topic.name;
    };

    const fetchDrafts = useCallback(async (page: number, isLoadMore = false) => {
        if (isLoadMore) {
            setLoadingMore(true);
        } else {
            setLoading(true);
        }

        try {
            const response = await fetch('/api/user/drafts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token.get(),
                    'Accept-Language': locale,
                },
                body: JSON.stringify({ page }),
            });

            const result = await response.json();

            if (result.ok) {
                if (isLoadMore) {
                    setDrafts(prev => [...prev, ...result.drafts]);
                } else {
                    setDrafts(result.drafts);
                }
                setHasMore(result.hasMore);
                setCurrentPage(page);
            } else {
                toast.error(result.message || lang({
                    'zh-CN': 'Ëé∑ÂèñËçâÁ®øÂ§±Ë¥•',
                    'en-US': 'Failed to fetch drafts',
                    'zh-TW': 'Áç≤ÂèñËçâÁ®øÂ§±Êïó',
                    'es-ES': 'Error al obtener los borradores',
                    'fr-FR': '√âchec de la r√©cup√©ration des brouillons',
                    'ru-RU': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏',
                    'ja-JP': '‰∏ãÊõ∏„Åç„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
                    'de-DE': 'Fehler beim Abrufen der Entw√ºrfe',
                    'pt-BR': 'Falha ao buscar rascunhos',
                    'ko-KR': 'Ï¥àÏïà Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®',
                }, locale));
            }
        } catch (error) {
            console.error('Fetch drafts error:', error);
            toast.error(lang({
                'zh-CN': 'ÁΩëÁªúÈîôËØØÔºåËØ∑ÈáçËØï',
                'en-US': 'Network error, please try again',
                'zh-TW': 'Á∂≤Áµ°ÈåØË™§ÔºåË´ãÈáçË©¶',
                'es-ES': 'Error de red, int√©ntalo de nuevo',
                'fr-FR': 'Erreur r√©seau, veuillez r√©essayer',
                'ru-RU': '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                'ja-JP': '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÄÅ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ',
                'de-DE': 'Netzwerkfehler, bitte versuchen Sie es erneut',
                'pt-BR': 'Erro de rede, tente novamente',
                'ko-KR': 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò, Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî',
            }, locale));
        } finally {
            setLoading(false);
            setLoadingMore(false);
        }
    }, [locale]);

    const handleDeleteDraft = async (draft: Draft) => {
        setDeletingDrafts(prev => new Set(prev).add(draft.id));

        try {
            const response = await fetch('/api/post/delete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token.get(),
                    'Accept-Language': locale,
                },
                body: JSON.stringify({ id: draft.id }),
            });

            const result = await response.json();

            if (result.ok) {
                setDrafts(prev => prev.filter(d => d.id !== draft.id));
                toast.success(result.message || lang({
                    'zh-CN': 'ËçâÁ®øÂà†Èô§ÊàêÂäü',
                    'en-US': 'Draft deleted successfully',
                    'zh-TW': 'ËçâÁ®øÂà™Èô§ÊàêÂäü',
                    'es-ES': 'Borrador eliminado exitosamente',
                    'fr-FR': 'Brouillon supprim√© avec succ√®s',
                    'ru-RU': '–ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
                    'ja-JP': '‰∏ãÊõ∏„Åç„ÅåÊ≠£Â∏∏„Å´ÂâäÈô§„Åï„Çå„Åæ„Åó„Åü',
                    'de-DE': 'Entwurf erfolgreich gel√∂scht',
                    'pt-BR': 'Rascunho deletado com sucesso',
                    'ko-KR': 'Ï¥àÏïàÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§',
                }, locale));
            } else {
                toast.error(result.message || lang({
                    'zh-CN': 'Âà†Èô§Â§±Ë¥•ÔºåËØ∑ÈáçËØï',
                    'en-US': 'Delete failed, please try again',
                    'zh-TW': 'Âà™Èô§Â§±ÊïóÔºåË´ãÈáçË©¶',
                    'es-ES': 'Error al eliminar, int√©ntalo de nuevo',
                    'fr-FR': '√âchec de la suppression, veuillez r√©essayer',
                    'ru-RU': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                    'ja-JP': 'ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ',
                    'de-DE': 'L√∂schen fehlgeschlagen, bitte versuchen Sie es erneut',
                    'pt-BR': 'Falha ao deletar, tente novamente',
                    'ko-KR': 'ÏÇ≠Ï†ú Ïã§Ìå®, Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî',
                }, locale));
            }
        } catch (error) {
            console.error('Delete draft error:', error);
            toast.error(lang({
                'zh-CN': 'ÁΩëÁªúÈîôËØØÔºåËØ∑ÈáçËØï',
                'en-US': 'Network error, please try again',
                'zh-TW': 'Á∂≤Áµ°ÈåØË™§ÔºåË´ãÈáçË©¶',
                'es-ES': 'Error de red, int√©ntalo de nuevo',
                'fr-FR': 'Erreur r√©seau, veuillez r√©essayer',
                'ru-RU': '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                'ja-JP': '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÄÅ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ',
                'de-DE': 'Netzwerkfehler, bitte versuchen Sie es erneut',
                'pt-BR': 'Erro de rede, tente novamente',
                'ko-KR': 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò, Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî',
            }, locale));
        } finally {
            setDeletingDrafts(prev => {
                const newSet = new Set(prev);
                newSet.delete(draft.id);
                return newSet;
            });
            setDeleteDialogOpen(false);
            setDraftToDelete(null);
        }
    };

    const handleEditDraft = (draft: Draft) => {
        setDraftToEdit(draft);
        setEditTitle(getLocalizedTitle(draft));
        setEditContent(draft.origin);
        
        // ËÆæÁΩÆÂ∑≤ÈÄâÊã©ÁöÑ‰∏ªÈ¢ò
        if (draft.topics.length > 0) {
            const topic = draft.topics[0];
            const topicDisplay = topic.emoji + ' ' + getLocalizedTopicName(topic);
            setSelectedTopic(topicDisplay);
            setSelectedTopicName(topic.name);
        } else {
            setSelectedTopic('');
            setSelectedTopicName('');
        }
        
        setEditDialogOpen(true);
    };

    // ÊèíÂÖ•Ë°®ÊÉÖÁ¨¶Âè∑
    const insertEmoji = (emoji: string) => {
        setEditContent((prev) => prev + emoji);
    };

    const handleSaveDraft = async () => {
        if (!draftToEdit || !editTitle.trim() || !editContent.trim()) {
            toast.error(lang({
                'zh-CN': 'Ê†áÈ¢òÂíåÂÜÖÂÆπ‰∏çËÉΩ‰∏∫Á©∫',
                'en-US': 'Title and content cannot be empty',
                'zh-TW': 'Ê®ôÈ°åÂíåÂÖßÂÆπ‰∏çËÉΩÁÇ∫Á©∫',
                'es-ES': 'El t√≠tulo y el contenido no pueden estar vac√≠os',
                'fr-FR': 'Le titre et le contenu ne peuvent pas √™tre vides',
                'ru-RU': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏',
                'ja-JP': '„Çø„Ç§„Éà„É´„Å®ÂÜÖÂÆπ„ÅØÁ©∫„Å´„Åß„Åç„Åæ„Åõ„Çì',
                'de-DE': 'Titel und Inhalt d√ºrfen nicht leer sein',
                'pt-BR': 'T√≠tulo e conte√∫do n√£o podem estar vazios',
                'ko-KR': 'Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÄ ÎπÑÏõåÎëò Ïàò ÏóÜÏäµÎãàÎã§',
            }, locale));
            return;
        }

        setSavingDraft(true);

        try {
            const response = await fetch('/api/post/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token.get(),
                    'Accept-Language': locale,
                },
                body: JSON.stringify({
                    id: draftToEdit.id,
                    title: editTitle,
                    content: editContent,
                    topic: selectedTopicName || (draftToEdit.topics[0]?.name),
                    published: false,
                }),
            });

            const result = await response.json();

            if (result.ok) {
                toast.success(lang({
                    'zh-CN': 'ËçâÁ®ø‰øùÂ≠òÊàêÂäü',
                    'en-US': 'Draft saved successfully',
                    'zh-TW': 'ËçâÁ®ø‰øùÂ≠òÊàêÂäü',
                    'es-ES': 'Borrador guardado exitosamente',
                    'fr-FR': 'Brouillon sauvegard√© avec succ√®s',
                    'ru-RU': '–ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
                    'ja-JP': '‰∏ãÊõ∏„Åç„ÅåÊ≠£Â∏∏„Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü',
                    'de-DE': 'Entwurf erfolgreich gespeichert',
                    'pt-BR': 'Rascunho salvo com sucesso',
                    'ko-KR': 'Ï¥àÏïàÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§',
                }, locale));
                setEditDialogOpen(false);
                fetchDrafts(1); // Âà∑Êñ∞ÂàóË°®
            } else {
                toast.error(result.message || lang({
                    'zh-CN': '‰øùÂ≠òÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
                    'en-US': 'Save failed, please try again',
                    'zh-TW': '‰øùÂ≠òÂ§±ÊïóÔºåË´ãÈáçË©¶',
                    'es-ES': 'Error al guardar, int√©ntalo de nuevo',
                    'fr-FR': '√âchec de la sauvegarde, veuillez r√©essayer',
                    'ru-RU': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                    'ja-JP': '‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ',
                    'de-DE': 'Speichern fehlgeschlagen, bitte versuchen Sie es erneut',
                    'pt-BR': 'Falha ao salvar, tente novamente',
                    'ko-KR': 'Ï†ÄÏû• Ïã§Ìå®, Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî',
                }, locale));
            }
        } catch (error) {
            console.error('Save draft error:', error);
            toast.error(lang({
                'zh-CN': 'ÁΩëÁªúÈîôËØØÔºåËØ∑ÈáçËØï',
                'en-US': 'Network error, please try again',
                'zh-TW': 'Á∂≤Áµ°ÈåØË™§ÔºåË´ãÈáçË©¶',
                'es-ES': 'Error de red, int√©ntalo de nuevo',
                'fr-FR': 'Erreur r√©seau, veuillez r√©essayer',
                'ru-RU': '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                'ja-JP': '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÄÅ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ',
                'de-DE': 'Netzwerkfehler, bitte versuchen Sie es erneut',
                'pt-BR': 'Erro de rede, tente novamente',
                'ko-KR': 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò, Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî',
            }, locale));
        } finally {
            setSavingDraft(false);
        }
    };

    const handlePublishDraft = async () => {
        if (!draftToEdit || !editTitle.trim() || !editContent.trim()) {
            toast.error(lang({
                'zh-CN': 'Ê†áÈ¢òÂíåÂÜÖÂÆπ‰∏çËÉΩ‰∏∫Á©∫',
                'en-US': 'Title and content cannot be empty',
                'zh-TW': 'Ê®ôÈ°åÂíåÂÖßÂÆπ‰∏çËÉΩÁÇ∫Á©∫',
                'es-ES': 'El t√≠tulo y el contenido no pueden estar vac√≠os',
                'fr-FR': 'Le titre et le contenu ne peuvent pas √™tre vides',
                'ru-RU': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏',
                'ja-JP': '„Çø„Ç§„Éà„É´„Å®ÂÜÖÂÆπ„ÅØÁ©∫„Å´„Åß„Åç„Åæ„Åõ„Çì',
                'de-DE': 'Titel und Inhalt d√ºrfen nicht leer sein',
                'pt-BR': 'T√≠tulo e conte√∫do n√£o podem estar vazios',
                'ko-KR': 'Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÄ ÎπÑÏõåÎëò Ïàò ÏóÜÏäµÎãàÎã§',
            }, locale));
            return;
        }

        setPublishingDraft(true);

        try {
            const response = await fetch('/api/post/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token.get(),
                    'Accept-Language': locale,
                },
                body: JSON.stringify({
                    id: draftToEdit.id,
                    title: editTitle,
                    content: editContent,
                    topic: selectedTopicName || (draftToEdit.topics[0]?.name),
                    published: true,
                }),
            });

            const result = await response.json();

            if (result.ok) {
                toast.success(lang({
                    'zh-CN': 'ÂèëÂ∏ÉÊàêÂäü',
                    'en-US': 'Published successfully',
                    'zh-TW': 'ÁôºÂ∏ÉÊàêÂäü',
                    'es-ES': 'Publicado exitosamente',
                    'fr-FR': 'Publi√© avec succ√®s',
                    'ru-RU': '–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ',
                    'ja-JP': 'Ê≠£Â∏∏„Å´ÂÖ¨Èñã„Åï„Çå„Åæ„Åó„Åü',
                    'de-DE': 'Erfolgreich ver√∂ffentlicht',
                    'pt-BR': 'Publicado com sucesso',
                    'ko-KR': 'ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Í≤åÏãúÎêòÏóàÏäµÎãàÎã§',
                }, locale));
                setEditDialogOpen(false);
                fetchDrafts(1); // Âà∑Êñ∞ÂàóË°®
            } else {
                toast.error(result.message || lang({
                    'zh-CN': 'ÂèëÂ∏ÉÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
                    'en-US': 'Publish failed, please try again',
                    'zh-TW': 'ÁôºÂ∏ÉÂ§±ÊïóÔºåË´ãÈáçË©¶',
                    'es-ES': 'Error al publicar, int√©ntalo de nuevo',
                    'fr-FR': '√âchec de la publication, veuillez r√©essayer',
                    'ru-RU': '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                    'ja-JP': 'ÂÖ¨Èñã„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ',
                    'de-DE': 'Ver√∂ffentlichung fehlgeschlagen, bitte versuchen Sie es erneut',
                    'pt-BR': 'Falha ao publicar, tente novamente',
                    'ko-KR': 'Í≤åÏãú Ïã§Ìå®, Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî',
                }, locale));
            }
        } catch (error) {
            console.error('Publish draft error:', error);
            toast.error(lang({
                'zh-CN': 'ÁΩëÁªúÈîôËØØÔºåËØ∑ÈáçËØï',
                'en-US': 'Network error, please try again',
                'zh-TW': 'Á∂≤Áµ°ÈåØË™§ÔºåË´ãÈáçË©¶',
                'es-ES': 'Error de red, int√©ntalo de nuevo',
                'fr-FR': 'Erreur r√©seau, veuillez r√©essayer',
                'ru-RU': '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                'ja-JP': '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÄÅ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ',
                'de-DE': 'Netzwerkfehler, bitte versuchen Sie es erneut',
                'pt-BR': 'Erro de rede, tente novamente',
                'ko-KR': 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò, Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî',
            }, locale));
        } finally {
            setPublishingDraft(false);
        }
    };

    const formatTime = (dateString: string) => {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now.getTime() - date.getTime();
        const diffMins = Math.floor(diffMs / (1000 * 60));
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

        if (diffMins < 1) {
            return lang({
                'zh-CN': 'ÂàöÂàö',
                'en-US': 'just now',
                'zh-TW': 'ÂâõÂâõ',
                'es-ES': 'ahora mismo',
                'fr-FR': "√† l'instant",
                'ru-RU': '—Ç–æ–ª—å–∫–æ —á—Ç–æ',
                'ja-JP': '„Åü„Å£„Åü‰ªä',
                'de-DE': 'gerade eben',
                'pt-BR': 'agora mesmo',
                'ko-KR': 'Î∞©Í∏à',
            }, locale);
        } else if (diffMins < 60) {
            return lang({
                'zh-CN': `${diffMins}ÂàÜÈíüÂâç`,
                'en-US': `${diffMins}m ago`,
                'zh-TW': `${diffMins}ÂàÜÈêòÂâç`,
                'es-ES': `hace ${diffMins}m`,
                'fr-FR': `il y a ${diffMins}m`,
                'ru-RU': `${diffMins}–º –Ω–∞–∑–∞–¥`,
                'ja-JP': `${diffMins}ÂàÜÂâç`,
                'de-DE': `vor ${diffMins}m`,
                'pt-BR': `h√° ${diffMins}m`,
                'ko-KR': `${diffMins}Î∂Ñ Ï†Ñ`,
            }, locale);
        } else if (diffHours < 24) {
            return lang({
                'zh-CN': `${diffHours}Â∞èÊó∂Ââç`,
                'en-US': `${diffHours}h ago`,
                'zh-TW': `${diffHours}Â∞èÊôÇÂâç`,
                'es-ES': `hace ${diffHours}h`,
                'fr-FR': `il y a ${diffHours}h`,
                'ru-RU': `${diffHours}—á –Ω–∞–∑–∞–¥`,
                'ja-JP': `${diffHours}ÊôÇÈñìÂâç`,
                'de-DE': `vor ${diffHours}h`,
                'pt-BR': `h√° ${diffHours}h`,
                'ko-KR': `${diffHours}ÏãúÍ∞Ñ Ï†Ñ`,
            }, locale);
        } else if (diffDays < 30) {
            return lang({
                'zh-CN': `${diffDays}Â§©Ââç`,
                'en-US': `${diffDays}d ago`,
                'zh-TW': `${diffDays}Â§©Ââç`,
                'es-ES': `hace ${diffDays}d`,
                'fr-FR': `il y a ${diffDays}j`,
                'ru-RU': `${diffDays}–¥ –Ω–∞–∑–∞–¥`,
                'ja-JP': `${diffDays}Êó•Ââç`,
                'de-DE': `vor ${diffDays}T`,
                'pt-BR': `h√° ${diffDays}d`,
                'ko-KR': `${diffDays}Ïùº Ï†Ñ`,
            }, locale);
        } else {
            return date.toLocaleDateString(locale, {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
            });
        }
    };

    // Êó†ÈôêÊªöÂä®ÈÄªËæë
    useEffect(() => {
        if (observerRef.current) observerRef.current.disconnect();

        observerRef.current = new IntersectionObserver(
            (entries) => {
                if (entries[0].isIntersecting && hasMore && !loadingMore && !loading) {
                    fetchDrafts(currentPage + 1, true);
                }
            },
            { threshold: 0.1 }
        );

        if (lastDraftRef.current) {
            observerRef.current.observe(lastDraftRef.current);
        }

        return () => {
            if (observerRef.current) {
                observerRef.current.disconnect();
            }
        };
    }, [hasMore, loadingMore, loading, currentPage, fetchDrafts]);

    // ÂàùÂßãÂä†ËΩΩ
    useEffect(() => {
        fetchDrafts(1);
    }, [fetchDrafts]);    if (loading) {
        return <EnhancedLoading type="drafts" />;
    }    return (
        <ContentTransition isLoading={loading}>
            <div className="space-y-4">
            <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                    <FileText className="h-5 w-5" />
                    <h2 className="text-xl font-semibold">
                        {lang({
                            'zh-CN': 'ÊàëÁöÑËçâÁ®ø',
                            'en-US': 'My Drafts',
                            'zh-TW': 'ÊàëÁöÑËçâÁ®ø',
                            'es-ES': 'Mis Borradores',
                            'fr-FR': 'Mes Brouillons',
                            'ru-RU': '–ú–æ–∏ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏',
                            'ja-JP': 'ÁßÅ„ÅÆ‰∏ãÊõ∏„Åç',
                            'de-DE': 'Meine Entw√ºrfe',
                            'pt-BR': 'Meus Rascunhos',
                            'ko-KR': 'ÎÇ¥ Ï¥àÏïà',
                        }, locale)}
                    </h2>
                </div>
                <Button
                    variant="outline"
                    size="sm"
                    onClick={() => fetchDrafts(1)}
                    disabled={loading}
                >
                    <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                    {lang({
                        'zh-CN': 'Âà∑Êñ∞',
                        'en-US': 'Refresh',
                        'zh-TW': 'Âà∑Êñ∞',
                        'es-ES': 'Actualizar',
                        'fr-FR': 'Actualiser',
                        'ru-RU': '–û–±–Ω–æ–≤–∏—Ç—å',
                        'ja-JP': 'Êõ¥Êñ∞',
                        'de-DE': 'Aktualisieren',
                        'pt-BR': 'Atualizar',
                        'ko-KR': 'ÏÉàÎ°úÍ≥†Ïπ®',
                    }, locale)}
                </Button>
            </div>

            {drafts.length === 0 ? (
                <Card>
                    <CardContent className="py-12 text-center">
                        <FileText className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
                        <p className="text-lg font-medium text-muted-foreground mb-2">
                            {lang({
                                'zh-CN': 'ÊöÇÊó†ËçâÁ®ø',
                                'en-US': 'No drafts yet',
                                'zh-TW': 'Êö´ÁÑ°ËçâÁ®ø',
                                'es-ES': 'A√∫n no hay borradores',
                                'fr-FR': 'Aucun brouillon pour l\'instant',
                                'ru-RU': '–ü–æ–∫–∞ –Ω–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤',
                                'ja-JP': '„Åæ„Å†‰∏ãÊõ∏„Åç„Åå„ÅÇ„Çä„Åæ„Åõ„Çì',
                                'de-DE': 'Noch keine Entw√ºrfe',
                                'pt-BR': 'Ainda n√£o h√° rascunhos',
                                'ko-KR': 'ÏïÑÏßÅ Ï¥àÏïàÏù¥ ÏóÜÏäµÎãàÎã§',
                            }, locale)}
                        </p>
                        <p className="text-sm text-muted-foreground">
                            {lang({
                                'zh-CN': 'ÂºÄÂßãÂàõÂª∫ÊÇ®ÁöÑÁ¨¨‰∏ÄÁØáËçâÁ®øÂêß',
                                'en-US': 'Start creating your first draft',
                                'zh-TW': 'ÈñãÂßãÂâµÂª∫ÊÇ®ÁöÑÁ¨¨‰∏ÄÁØáËçâÁ®øÂêß',
                                'es-ES': 'Comienza creando tu primer borrador',
                                'fr-FR': 'Commencez √† cr√©er votre premier brouillon',
                                'ru-RU': '–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫',
                                'ja-JP': 'ÊúÄÂàù„ÅÆ‰∏ãÊõ∏„Åç„Çí‰ΩúÊàê„Åó„Åæ„Åó„Çá„ÅÜ',
                                'de-DE': 'Beginnen Sie mit der Erstellung Ihres ersten Entwurfs',
                                'pt-BR': 'Comece criando seu primeiro rascunho',
                                'ko-KR': 'Ï≤´ Î≤àÏß∏ Ï¥àÏïàÏùÑ ÎßåÎì§Ïñ¥ Î≥¥ÏÑ∏Ïöî',
                            }, locale)}
                        </p>
                    </CardContent>
                </Card>
            ) : (                <div className="space-y-4">
                    {drafts.map((draft, index) => (
                        <ListItemTransition key={draft.id} index={index}>
                            <Card 
                                ref={index === drafts.length - 1 ? lastDraftRef : null}
                                className="hover:shadow-md transition-shadow"
                            >
                            <CardHeader className="pb-4">
                                <div className="flex items-start justify-between">
                                    <div className="flex-1 min-w-0">
                                        <div className="flex items-center gap-2 mb-2">
                                            <h3 className="font-semibold text-lg leading-tight break-words">
                                                {getLocalizedTitle(draft)}
                                            </h3>
                                            <Badge variant="secondary" className="text-xs">
                                                {lang({
                                                    'zh-CN': 'ËçâÁ®ø',
                                                    'en-US': 'Draft',
                                                    'zh-TW': 'ËçâÁ®ø',
                                                    'es-ES': 'Borrador',
                                                    'fr-FR': 'Brouillon',
                                                    'ru-RU': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
                                                    'ja-JP': '‰∏ãÊõ∏„Åç',
                                                    'de-DE': 'Entwurf',
                                                    'pt-BR': 'Rascunho',
                                                    'ko-KR': 'Ï¥àÏïà',
                                                }, locale)}
                                            </Badge>
                                        </div>

                                        <div className="flex items-center gap-2 text-sm text-muted-foreground mb-3">
                                            <div className="flex items-center gap-1">
                                                <Calendar className="h-4 w-4" />
                                                <span>
                                                    {lang({
                                                        'zh-CN': 'Êõ¥Êñ∞‰∫é',
                                                        'en-US': 'Updated',
                                                        'zh-TW': 'Êõ¥Êñ∞Êñº',
                                                        'es-ES': 'Actualizado',
                                                        'fr-FR': 'Mis √† jour',
                                                        'ru-RU': '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
                                                        'ja-JP': 'Êõ¥Êñ∞',
                                                        'de-DE': 'Aktualisiert',
                                                        'pt-BR': 'Atualizado',
                                                        'ko-KR': 'ÏóÖÎç∞Ïù¥Ìä∏Îê®',
                                                    }, locale)} {formatTime(draft.updatedAt)}
                                                </span>
                                            </div>
                                        </div>

                                        {draft.topics.length > 0 && (
                                            <div className="flex flex-wrap gap-1 mb-3">
                                                {draft.topics.map((topic) => (
                                                    <Badge key={topic.name} variant="outline" className="text-xs">
                                                        <span className="mr-1">{topic.emoji}</span>
                                                        {getLocalizedTopicName(topic)}
                                                    </Badge>
                                                ))}
                                            </div>
                                        )}
                                    </div>

                                    <div className="flex items-center gap-2 ml-4">
                                        <Button
                                            variant="outline"
                                            size="sm"
                                            onClick={() => handleEditDraft(draft)}
                                            className="text-primary hover:text-primary"
                                        >
                                            <Edit className="h-4 w-4" />
                                        </Button>
                                        <Button
                                            variant="outline"
                                            size="sm"
                                            onClick={() => {
                                                setDraftToDelete(draft);
                                                setDeleteDialogOpen(true);
                                            }}
                                            disabled={deletingDrafts.has(draft.id)}
                                            className="text-destructive hover:text-destructive"
                                        >
                                            {deletingDrafts.has(draft.id) ? (
                                                <Loader2 className="h-4 w-4 animate-spin" />
                                            ) : (
                                                <Trash2 className="h-4 w-4" />
                                            )}
                                        </Button>
                                    </div>
                                </div>
                            </CardHeader>

                            <CardContent className="pt-0">
                                <p className="text-sm text-muted-foreground line-clamp-3">
                                    {draft.origin.substring(0, 200)}
                                    {draft.origin.length > 200 && '...'}
                                </p>                            </CardContent>
                        </Card>
                        </ListItemTransition>
                    ))}

                    {loadingMore && (
                        <div className="flex items-center justify-center py-8">
                            <Loader2 className="h-6 w-6 animate-spin" />
                            <span className="ml-2 text-sm text-muted-foreground">
                                {lang({
                                    'zh-CN': 'Âä†ËΩΩÊõ¥Â§ö...',
                                    'en-US': 'Loading more...',
                                    'zh-TW': 'ËºâÂÖ•Êõ¥Â§ö...',
                                    'es-ES': 'Cargando m√°s...',
                                    'fr-FR': 'Chargement...',
                                    'ru-RU': '–ó–∞–≥—Ä—É–∑–∫–∞...',
                                    'ja-JP': 'Ë™≠„ÅøËæº„Åø‰∏≠...',
                                    'de-DE': 'Lade mehr...',
                                    'pt-BR': 'Carregando mais...',
                                    'ko-KR': 'Îçî Î∂àÎü¨Ïò§Îäî Ï§ë...',
                                }, locale)}
                            </span>
                        </div>
                    )}

                    {!hasMore && drafts.length > 0 && (
                        <div className="text-center py-8">
                            <p className="text-sm text-muted-foreground">
                                {lang({
                                    'zh-CN': 'Ê≤°ÊúâÊõ¥Â§öËçâÁ®ø‰∫Ü',
                                    'en-US': 'No more drafts',
                                    'zh-TW': 'Ê≤íÊúâÊõ¥Â§öËçâÁ®ø‰∫Ü',
                                    'es-ES': 'No hay m√°s borradores',
                                    'fr-FR': 'Aucun autre brouillon',
                                    'ru-RU': '–ë–æ–ª—å—à–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –Ω–µ—Ç',
                                    'ja-JP': '„Åì„Çå‰ª•‰∏ä‰∏ãÊõ∏„Åç„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì',
                                    'de-DE': 'Keine weiteren Entw√ºrfe',
                                    'pt-BR': 'N√£o h√° mais rascunhos',
                                    'ko-KR': 'Îçî Ïù¥ÏÉÅ Ï¥àÏïàÏù¥ ÏóÜÏäµÎãàÎã§',
                                }, locale)}
                            </p>
                        </div>
                    )}
                </div>
            )}

            {/* ÁºñËæë Sheet */}
            <Sheet open={editDialogOpen} onOpenChange={setEditDialogOpen}>
                <SheetContent 
                    side="bottom" 
                    className="h-[85vh] p-0 border-t-0 shadow-2xl"
                >
                    {/* ÊãñÊãΩÊâãÊüÑ */}
                    <div className='w-full h-6 flex items-center justify-center bg-background/80 backdrop-blur-sm relative group'>
                        <div className='w-12 h-1 bg-muted-foreground/20 group-hover:bg-[#f0b100]/50 rounded-full transition-colors duration-300' />
                    </div>

                    {/* ÂèØÊªöÂä®ÁöÑ‰∏ªÂÜÖÂÆπÂå∫Âüü */}
                    <div className='h-[calc(100%-24px)] overflow-y-auto'>
                        <div className='w-full max-w-7xl mx-auto flex flex-col px-4 md:px-6 pb-4 md:pb-6'>
                            <SheetHeader className='py-3 md:py-4 flex-shrink-0'>
                                <SheetTitle className='text-lg md:text-xl font-semibold text-center'>
                                    {lang({
                                        'zh-CN': 'ÁºñËæëËçâÁ®ø',
                                        'en-US': 'Edit Draft',
                                        'zh-TW': 'Á∑®ËºØËçâÁ®ø',
                                        'es-ES': 'Editar Borrador',
                                        'fr-FR': 'Modifier le Brouillon',
                                        'ru-RU': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ß–µ—Ä–Ω–æ–≤–∏–∫',
                                        'ja-JP': '‰∏ãÊõ∏„Åç„ÇíÁ∑®ÈõÜ',
                                        'de-DE': 'Entwurf Bearbeiten',
                                        'pt-BR': 'Editar Rascunho',
                                        'ko-KR': 'Ï¥àÏïà Ìé∏Ïßë',
                                    }, locale)}
                                </SheetTitle>
                            </SheetHeader>

                            <div className='space-y-4 md:space-y-6'>
                                {/* Ê†áÈ¢òÂíå‰∏ªÈ¢òË°å */}
                                <div className='grid grid-cols-1 gap-3 md:gap-4 lg:grid-cols-2 lg:gap-6'>
                                    <div className='space-y-2 md:space-y-3'>
                                        <Label
                                            htmlFor='edit-title'
                                            className='text-sm font-medium flex items-center gap-2 h-5 md:h-6'
                                        >
                                            {lang({
                                                'zh-CN': 'Ê†áÈ¢ò',
                                                'zh-TW': 'Ê®ôÈ°å',
                                                'en-US': 'Title',
                                                'es-ES': 'T√≠tulo',
                                                'fr-FR': 'Titre',
                                                'ru-RU': '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
                                                'ja-JP': '„Çø„Ç§„Éà„É´',
                                                'de-DE': 'Titel',
                                                'pt-BR': 'T√≠tulo',
                                                'ko-KR': 'Ï†úÎ™©',
                                            }, locale)}
                                            <Badge
                                                variant={
                                                    editTitle.length > 40
                                                        ? 'destructive'
                                                        : 'secondary'
                                                }
                                                className='text-xs'
                                            >
                                                {editTitle.length}/50
                                            </Badge>
                                        </Label>
                                        <Input
                                            id='edit-title'
                                            value={editTitle}
                                            onChange={(e) => setEditTitle(e.target.value)}
                                            placeholder={lang({
                                                'zh-CN': 'ËæìÂÖ•‰∏Ä‰∏™Âê∏Âºï‰∫∫ÁöÑÊ†áÈ¢ò...',
                                                'zh-TW': 'Ëº∏ÂÖ•‰∏ÄÂÄãÂê∏Âºï‰∫∫ÁöÑÊ®ôÈ°å...',
                                                'en-US': 'Enter an engaging title...',
                                                'es-ES': 'Ingrese un t√≠tulo atractivo...',
                                                'fr-FR': 'Saisissez un titre engageant...',
                                                'ru-RU': '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫...',
                                                'ja-JP': 'È≠ÖÂäõÁöÑ„Å™„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ...',
                                                'de-DE': 'Geben Sie einen ansprechenden Titel ein...',
                                                'pt-BR': 'Digite um t√≠tulo atraente...',
                                                'ko-KR': 'Îß§Î†•Ï†ÅÏù∏ Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî...',
                                            }, locale)}
                                            maxLength={50}
                                            className='h-10 md:h-12 text-sm md:text-base border-2 focus:border-[#f0b100] transition-colors'
                                        />
                                    </div>

                                    <div className='space-y-2 md:space-y-3'>
                                        <Label className='text-sm font-medium h-5 md:h-6 flex items-center'>
                                            {lang({
                                                'zh-CN': '‰∏ªÈ¢òÂàÜÁ±ª',
                                                'zh-TW': '‰∏ªÈ°åÂàÜÈ°û',
                                                'en-US': 'Topic Category',
                                                'es-ES': 'Categor√≠a del Tema',
                                                'fr-FR': 'Cat√©gorie du Sujet',
                                                'ru-RU': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¢–µ–º—ã',
                                                'ja-JP': '„Éà„Éî„ÉÉ„ÇØ„Ç´„ÉÜ„Ç¥„É™',
                                                'de-DE': 'Themenkategorie',
                                                'pt-BR': 'Categoria do T√≥pico',
                                                'ko-KR': 'Ï£ºÏ†ú Ïπ¥ÌÖåÍ≥†Î¶¨',
                                            }, locale)}
                                        </Label>
                                        <div className='relative'>
                                            <Input
                                                readOnly
                                                value={selectedTopic}
                                                placeholder={lang({
                                                    'zh-CN': 'ÈÄâÊã©‰∏Ä‰∏™‰∏ªÈ¢ò...',
                                                    'zh-TW': 'ÈÅ∏Êìá‰∏ÄÂÄã‰∏ªÈ°å...',
                                                    'en-US': 'Select a topic...',
                                                    'es-ES': 'Selecciona un tema...',
                                                    'fr-FR': 'S√©lectionnez un sujet...',
                                                    'ru-RU': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É...',
                                                    'ja-JP': '„Éà„Éî„ÉÉ„ÇØ„ÇíÈÅ∏Êäû...',
                                                    'de-DE': 'W√§hlen Sie ein Thema...',
                                                    'pt-BR': 'Selecione um t√≥pico...',
                                                    'ko-KR': 'Ï£ºÏ†úÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî...',
                                                }, locale)}
                                                className='h-10 md:h-12 text-sm md:text-base border-2 focus:border-[#f0b100] transition-colors cursor-pointer pr-10'
                                                onClick={() => setTopicDialogOpen(true)}
                                            />
                                            <RiArrowDownSLine className='absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none' />
                                        </div>

                                        {/* ‰∏ªÈ¢òÈÄâÊã© Dialog */}
                                        <Dialog open={topicDialogOpen} onOpenChange={setTopicDialogOpen}>
                                            <DialogContent className='max-w-md max-h-[80vh] flex flex-col'>
                                                <DialogHeader>
                                                    <DialogTitle>
                                                        {lang({
                                                            'zh-CN': 'ÈÄâÊã©‰∏ªÈ¢òÂàÜÁ±ª',
                                                            'zh-TW': 'ÈÅ∏Êìá‰∏ªÈ°åÂàÜÈ°û',
                                                            'en-US': 'Select Topic Category',
                                                            'es-ES': 'Seleccionar Categor√≠a del Tema',
                                                            'fr-FR': 'S√©lectionner la Cat√©gorie du Sujet',
                                                            'ru-RU': '–í—ã–±–µ—Ä–∏—Ç–µ –ö–∞—Ç–µ–≥–æ—Ä–∏—é –¢–µ–º—ã',
                                                            'ja-JP': '„Éà„Éî„ÉÉ„ÇØ„Ç´„ÉÜ„Ç¥„É™„ÇíÈÅ∏Êäû',
                                                            'de-DE': 'Themenkategorie Ausw√§hlen',
                                                            'pt-BR': 'Selecionar Categoria do T√≥pico',
                                                            'ko-KR': 'Ï£ºÏ†ú Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù',
                                                        }, locale)}
                                                    </DialogTitle>
                                                </DialogHeader>

                                                {/* ÊêúÁ¥¢Ê°Ü */}
                                                <div className='relative mb-4'>
                                                    <RiSearchLine className='absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground' />
                                                    <Input
                                                        value={topicSearchQuery}
                                                        onChange={(e) => setTopicSearchQuery(e.target.value)}
                                                        placeholder={lang({
                                                            'zh-CN': 'ÊêúÁ¥¢‰∏ªÈ¢ò...',
                                                            'zh-TW': 'ÊêúÁ¥¢‰∏ªÈ°å...',
                                                            'en-US': 'Search topics...',
                                                            'es-ES': 'Buscar temas...',
                                                            'fr-FR': 'Rechercher des sujets...',
                                                            'ru-RU': '–ü–æ–∏—Å–∫ —Ç–µ–º...',
                                                            'ja-JP': '„Éà„Éî„ÉÉ„ÇØ„ÇíÊ§úÁ¥¢...',
                                                            'de-DE': 'Themen suchen...',
                                                            'pt-BR': 'Buscar t√≥picos...',
                                                            'ko-KR': 'Ï£ºÏ†ú Í≤ÄÏÉâ...',
                                                        }, locale)}
                                                        className='pl-10'
                                                    />
                                                </div>

                                                {/* ‰∏ªÈ¢òÂàóË°® */}
                                                <div className='flex-1 overflow-y-auto space-y-1 pr-2'>
                                                    {getFilteredTopics().length > 0 ? (
                                                        getFilteredTopics().map((topic) => (
                                                            <div
                                                                key={topic.name}
                                                                onClick={() => handleTopicSelect(topic.name, topic.display)}
                                                                className={`flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors hover:bg-muted ${
                                                                    selectedTopicName === topic.name
                                                                        ? 'bg-[#f0b100]/10 border border-[#f0b100]'
                                                                        : 'border border-transparent'
                                                                }`}
                                                            >
                                                                <span className='text-sm'>{topic.display}</span>
                                                                {selectedTopicName === topic.name && (
                                                                    <RiCheckLine className='h-4 w-4 text-[#f0b100]' />
                                                                )}
                                                            </div>
                                                        ))
                                                    ) : (
                                                        <div className='text-center py-8 text-muted-foreground'>
                                                            <div className='text-2xl mb-2'>üîç</div>
                                                            <p className='text-sm'>
                                                                {lang({
                                                                    'zh-CN': 'Êú™ÊâæÂà∞ÂåπÈÖçÁöÑ‰∏ªÈ¢ò',
                                                                    'zh-TW': 'Êú™ÊâæÂà∞ÂåπÈÖçÁöÑ‰∏ªÈ°å',
                                                                    'en-US': 'No matching topics found',
                                                                    'es-ES': 'No se encontraron temas coincidentes',
                                                                    'fr-FR': 'Aucun sujet correspondant trouv√©',
                                                                    'ru-RU': '–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                                                                    'ja-JP': '‰∏ÄËá¥„Åô„Çã„Éà„Éî„ÉÉ„ÇØ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì',
                                                                    'de-DE': 'Keine passenden Themen gefunden',
                                                                    'pt-BR': 'Nenhum t√≥pico correspondente encontrado',
                                                                    'ko-KR': 'ÏùºÏπòÌïòÎäî Ï£ºÏ†úÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
                                                                }, locale)}
                                                            </p>
                                                        </div>
                                                    )}
                                                </div>

                                                {/* Â∫ïÈÉ®ÊåâÈíÆ */}
                                                <div className='flex justify-end pt-4 border-t'>
                                                    <Button
                                                        variant='outline'
                                                        onClick={() => {
                                                            setTopicDialogOpen(false);
                                                            setTopicSearchQuery('');
                                                        }}
                                                    >
                                                        {lang({
                                                            'zh-CN': 'ÂèñÊ∂à',
                                                            'zh-TW': 'ÂèñÊ∂à',
                                                            'en-US': 'Cancel',
                                                            'es-ES': 'Cancelar',
                                                            'fr-FR': 'Annuler',
                                                            'ru-RU': '–û—Ç–º–µ–Ω–∞',
                                                            'ja-JP': '„Ç≠„É£„É≥„Çª„É´',
                                                            'de-DE': 'Abbrechen',
                                                            'pt-BR': 'Cancelar',
                                                            'ko-KR': 'Ï∑®ÏÜå',
                                                        }, locale)}
                                                    </Button>
                                                </div>
                                            </DialogContent>
                                        </Dialog>
                                    </div>
                                </div>

                                {/* ÂÜÖÂÆπÁºñËæëÂô® */}
                                <div className='space-y-3 md:space-y-4'>
                                    <div className='flex items-center justify-between'>
                                        <Label className='text-sm font-medium flex items-center gap-2'>
                                            {lang({
                                                'zh-CN': 'ÂÜÖÂÆπ',
                                                'zh-TW': 'ÂÖßÂÆπ',
                                                'en-US': 'Content',
                                                'es-ES': 'Contenido',
                                                'fr-FR': 'Contenu',
                                                'ru-RU': '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ',
                                                'ja-JP': 'ÂÜÖÂÆπ',
                                                'de-DE': 'Inhalt',
                                                'pt-BR': 'Conte√∫do',
                                                'ko-KR': 'ÎÇ¥Ïö©',
                                            }, locale)}
                                            <Badge
                                                variant={
                                                    editContent.length > 150 ? 'destructive' : 'secondary'
                                                }
                                                className='text-xs'
                                            >
                                                {editContent.length}/200
                                            </Badge>
                                        </Label>
                                    </div>

                                    {/* ‰ΩøÁî®Êñ∞ÁöÑ MarkdownEditor ÁªÑ‰ª∂ */}
                                    <MarkdownEditor
                                        value={editContent}
                                        onChange={setEditContent}
                                        locale={locale}
                                        maxLength={200}
                                    />
                                </div>

                                <Separator className='my-3 md:my-4' />

                                {/* Êìç‰ΩúÊåâÈíÆ */}
                                <div className='flex justify-end items-center'>
                                    <div className='flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3 w-full sm:w-auto'>
                                        <Button
                                            variant='outline'
                                            onClick={() => setEditDialogOpen(false)}
                                            className='px-4 md:px-6 border-2 h-10 md:h-auto text-sm md:text-base'
                                        >
                                            <X className='h-4 w-4 mr-2' />
                                            {lang({
                                                'zh-CN': 'ÂèñÊ∂à',
                                                'en-US': 'Cancel',
                                                'zh-TW': 'ÂèñÊ∂à',
                                                'es-ES': 'Cancelar',
                                                'fr-FR': 'Annuler',
                                                'ru-RU': '–û—Ç–º–µ–Ω–∏—Ç—å',
                                                'ja-JP': '„Ç≠„É£„É≥„Çª„É´',
                                                'de-DE': 'Abbrechen',
                                                'pt-BR': 'Cancelar',
                                                'ko-KR': 'Ï∑®ÏÜå',
                                            }, locale)}
                                        </Button>
                                        
                                        <Button
                                            variant='outline'
                                            onClick={handleSaveDraft}
                                            disabled={savingDraft}
                                            className='px-4 md:px-6 border-2 hover:border-[#f0b100] hover:text-[#f0b100] h-10 md:h-auto text-sm md:text-base'
                                        >
                                            {savingDraft ? (
                                                <Loader2 className='h-4 w-4 animate-spin mr-2' />
                                            ) : (
                                                <Save className='h-4 w-4 mr-2' />
                                            )}
                                            {lang({
                                                'zh-CN': '‰øùÂ≠òËçâÁ®ø',
                                                'en-US': 'Save Draft',
                                                'zh-TW': '‰øùÂ≠òËçâÁ®ø',
                                                'es-ES': 'Guardar Borrador',
                                                'fr-FR': 'Sauvegarder le Brouillon',
                                                'ru-RU': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ß–µ—Ä–Ω–æ–≤–∏–∫',
                                                'ja-JP': '‰∏ãÊõ∏„Åç„Çí‰øùÂ≠ò',
                                                'de-DE': 'Entwurf Speichern',
                                                'pt-BR': 'Salvar Rascunho',
                                                'ko-KR': 'Ï¥àÏïà Ï†ÄÏû•',
                                            }, locale)}
                                        </Button>

                                        <Button
                                            onClick={handlePublishDraft}
                                            disabled={publishingDraft}
                                            style={{ backgroundColor: '#f0b100' }}
                                            className='px-6 md:px-8 text-white hover:opacity-90 transition-opacity shadow-lg h-10 md:h-auto text-sm md:text-base'
                                        >
                                            {publishingDraft ? (
                                                <Loader2 className='h-4 w-4 animate-spin mr-2' />
                                            ) : (
                                                <Send className='h-4 w-4 mr-2' />
                                            )}
                                            {lang({
                                                'zh-CN': 'ÂèëÂ∏É',
                                                'en-US': 'Publish',
                                                'zh-TW': 'ÁôºÂ∏É',
                                                'es-ES': 'Publicar',
                                                'fr-FR': 'Publier',
                                                'ru-RU': '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
                                                'ja-JP': 'ÂÖ¨Èñã',
                                                'de-DE': 'Ver√∂ffentlichen',
                                                'pt-BR': 'Publicar',
                                                'ko-KR': 'Í≤åÏãú',
                                            }, locale)}
                                        </Button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </SheetContent>
            </Sheet>

            {/* Âà†Èô§Á°ÆËÆ§ÂØπËØùÊ°Ü */}
            <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>
                            {lang({
                                'zh-CN': 'Á°ÆËÆ§Âà†Èô§',
                                'en-US': 'Confirm Delete',
                                'zh-TW': 'Á¢∫Ë™çÂà™Èô§',
                                'es-ES': 'Confirmar eliminaci√≥n',
                                'fr-FR': 'Confirmer la suppression',
                                'ru-RU': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ',
                                'ja-JP': 'ÂâäÈô§„ÅÆÁ¢∫Ë™ç',
                                'de-DE': 'L√∂schen best√§tigen',
                                'pt-BR': 'Confirmar exclus√£o',
                                'ko-KR': 'ÏÇ≠Ï†ú ÌôïÏù∏',
                            }, locale)}
                        </DialogTitle>
                        <DialogDescription>
                            {lang({
                                'zh-CN': 'ÊÇ®Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™ËçâÁ®øÂêóÔºüÊ≠§Êìç‰ΩúÊó†Ê≥ïÊí§ÈîÄ„ÄÇ',
                                'en-US': 'Are you sure you want to delete this draft? This action cannot be undone.',
                                'zh-TW': 'ÊÇ®Á¢∫ÂÆöË¶ÅÂà™Èô§ÈÄôÂÄãËçâÁ®øÂóéÔºüÊ≠§Êìç‰ΩúÁÑ°Ê≥ïÊí§Èä∑„ÄÇ',
                                'es-ES': '¬øEst√°s seguro de que quieres eliminar este borrador? Esta acci√≥n no se puede deshacer.',
                                'fr-FR': '√ätes-vous s√ªr de vouloir supprimer ce brouillon ? Cette action ne peut pas √™tre annul√©e.',
                                'ru-RU': '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
                                'ja-JP': '„Åì„ÅÆ‰∏ãÊõ∏„Åç„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ',
                                'de-DE': 'Sind Sie sicher, dass Sie diesen Entwurf l√∂schen m√∂chten? Diese Aktion kann nicht r√ºckg√§ngig gemacht werden.',
                                'pt-BR': 'Tem certeza de que deseja excluir este rascunho? Esta a√ß√£o n√£o pode ser desfeita.',
                                'ko-KR': 'Ïù¥ Ï¥àÏïàÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.',
                            }, locale)}
                        </DialogDescription>
                    </DialogHeader>
                    {draftToDelete && (
                        <div className="py-4">
                            <p className="font-medium">{getLocalizedTitle(draftToDelete)}</p>
                            <p className="text-sm text-muted-foreground mt-1">
                                {draftToDelete.origin.substring(0, 100)}
                                {draftToDelete.origin.length > 100 && '...'}
                            </p>
                        </div>
                    )}
                    <DialogFooter>
                        <Button
                            variant="outline"
                            onClick={() => {
                                setDeleteDialogOpen(false);
                                setDraftToDelete(null);
                            }}
                        >
                            {lang({
                                'zh-CN': 'ÂèñÊ∂à',
                                'en-US': 'Cancel',
                                'zh-TW': 'ÂèñÊ∂à',
                                'es-ES': 'Cancelar',
                                'fr-FR': 'Annuler',
                                'ru-RU': '–û—Ç–º–µ–Ω–∞',
                                'ja-JP': '„Ç≠„É£„É≥„Çª„É´',
                                'de-DE': 'Abbrechen',
                                'pt-BR': 'Cancelar',
                                'ko-KR': 'Ï∑®ÏÜå',
                            }, locale)}
                        </Button>
                        <Button
                            variant="destructive"
                            onClick={() => draftToDelete && handleDeleteDraft(draftToDelete)}
                            disabled={deletingDrafts.has(draftToDelete?.id || 0)}
                        >
                            {deletingDrafts.has(draftToDelete?.id || 0) ? (
                                <Loader2 className="h-4 w-4 animate-spin mr-2" />
                            ) : (
                                <Trash2 className="h-4 w-4 mr-2" />
                            )}
                            {lang({
                                'zh-CN': 'Âà†Èô§',
                                'en-US': 'Delete',
                                'zh-TW': 'Âà™Èô§',
                                'es-ES': 'Eliminar',
                                'fr-FR': 'Supprimer',
                                'ru-RU': '–£–¥–∞–ª–∏—Ç—å',
                                'ja-JP': 'ÂâäÈô§',
                                'de-DE': 'L√∂schen',
                                'pt-BR': 'Excluir',
                                'ko-KR': 'ÏÇ≠Ï†ú',
                            }, locale)}
                        </Button>
                    </DialogFooter>                </DialogContent>
            </Dialog>
            </div>
        </ContentTransition>
    );
}
