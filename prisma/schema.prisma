generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid             Int          @id @default(autoincrement())
  uuid            String       @default(uuid())
  email           String       @unique
  emailVerified   Boolean      @default(false)
  emailNotice     Boolean      @default(true)
  username        String       @unique @db.VarChar(20)
  nickname        String       @db.VarChar(50)
  bio             String?      @db.VarChar(255)
  birth           String?      @db.VarChar(10)
  country         String?      @db.VarChar(20)
  timearea        String?      @db.VarChar(10)
  role            Role         @default(USER)
  updatedAt       DateTime     @updatedAt
  createdAt       DateTime     @default(now())
  gender          Gender?      @default(UNSET)
  password        String
  emailVerifyCode String?      @db.VarChar(30)
  exp             Int          @default(0)
  lastUseAt       DateTime?
  profileEmoji    String?      @db.VarChar(30)
  avatar          Avatar[]
  followed        FriendShip[] @relation("Followed")
  following       FriendShip[] @relation("Following")
  likes           Like[]
  notice          Notice[]
  post            Post[]
  reply           Reply[]
  tasks           Task[]
}

model Post {
  id          Int      @id @default(autoincrement())
  origin      String   @db.VarChar(200)
  userUid     Int?
  createdAt   DateTime @default(now())
  lastReplyAt DateTime @default(now())
  originLang  String?  @db.VarChar(10)
  published   Boolean  @default(false)
  title       String   @db.VarChar(50)
  updatedAt   DateTime @updatedAt
  pin         Boolean  @default(false)
  contentDEDE String?
  contentENUS String?
  contentESES String?
  contentFRFR String?
  contentJAJP String?
  contentKOKR String?
  contentPTBR String?
  contentRURU String?
  contentZHCN String?
  contentZHTW String?
  titleDEDE   String?
  titleENUS   String?
  titleESES   String?
  titleFRFR   String?
  titleJAJP   String?
  titleKOKR   String?
  titlePTBR   String?
  titleRURU   String?
  titleZHCN   String?
  titleZHTW   String?
  unsafeTags  Json?    @db.JsonB
  likes       Like[]
  User        User?    @relation(fields: [userUid], references: [uid])
  Reply       Reply[]
  topics      Topic[]  @relation("PostTopics")
  tasks       Task[]
}

model Like {
  uuid      String   @id @default(uuid())
  userUid   Int
  postId    Int?
  replyId   String?
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postId], references: [id])
  reply     Reply?   @relation(fields: [replyId], references: [id])
  user      User     @relation(fields: [userUid], references: [uid])
}

model Topic {
  name               String         @id @db.VarChar(100)
  emoji              String         @db.VarChar(10)
  index              Int            @default(0)
  nameZHCN           String?        @db.VarChar(100)
  nameENUS           String?        @db.VarChar(100)
  nameZHTW           String?        @db.VarChar(100)
  nameESES           String?        @db.VarChar(100)
  nameFRFR           String?        @db.VarChar(100)
  nameRURU           String?        @db.VarChar(100)
  nameJAJP           String?        @db.VarChar(100)
  nameDEDE           String?        @db.VarChar(100)
  namePTBR           String?        @db.VarChar(100)
  nameKOKR           String?        @db.VarChar(100)
  classificationName String         @db.VarChar(100)
  Classification     Classification @relation(fields: [classificationName], references: [name])
  posts              Post[]         @relation("PostTopics")
}

model Classification {
  name      String   @id @db.VarChar(100)
  emoji     String   @db.VarChar(10)
  index     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nameZHCN  String?  @db.VarChar(100)
  nameENUS  String?  @db.VarChar(100)
  nameZHTW  String?  @db.VarChar(100)
  nameESES  String?  @db.VarChar(100)
  nameFRFR  String?  @db.VarChar(100)
  nameRURU  String?  @db.VarChar(100)
  nameJAJP  String?  @db.VarChar(100)
  nameDEDE  String?  @db.VarChar(100)
  namePTBR  String?  @db.VarChar(100)
  nameKOKR  String?  @db.VarChar(100)
  topics    Topic[]
}

model Reply {
  id           String   @id @default(uuid())
  content      String   @db.VarChar(200)
  originLang   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  postUid      Int?
  commentUid   String?
  userUid      Int
  likeUserUid  Int[]
  belongPostid Int?
  childReplay  Boolean  @default(false)
  contentDEDE  String?
  contentENUS  String?
  contentESES  String?
  contentFRFR  String?
  contentJAJP  String?
  contentKOKR  String?
  contentPTBR  String?
  contentRURU  String?
  contentZHCN  String?
  contentZHTW  String?
  unsafeTags   Json?    @db.JsonB
  likes        Like[]
  parentReply  Reply?   @relation("CommentReplies", fields: [commentUid], references: [id])
  replies      Reply[]  @relation("CommentReplies")
  post         Post?    @relation(fields: [postUid], references: [id])
  user         User     @relation(fields: [userUid], references: [uid])
  tasks        Task[]
}

model Task {
  id        String   @id @default(uuid())
  status    String   @default("PENDING") @db.VarChar(20)
  user      User?    @relation(fields: [userUid], references: [uid])
  userUid   Int?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  reply     Reply?   @relation(fields: [replyId], references: [id])
  replyId   String?
  createdAt DateTime @default(now())
}

model Avatar {
  id         String @id @default(uuid())
  userUid    Int
  emoji      String @db.VarChar(10)
  background String @db.VarChar(100)
  user       User   @relation(fields: [userUid], references: [uid])
}

model FriendShip {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("Followed", fields: [followerId], references: [uid])
  following   User     @relation("Following", fields: [followingId], references: [uid])
}

model Notice {
  id        String   @id @default(uuid())
  userId    Int
  isRead    Boolean  @default(false)
  content   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [uid])
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum Gender {
  MALE
  FEMALE
  INTERSEX
  UNSET
}
