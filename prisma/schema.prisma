generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid             Int          @id @default(autoincrement())
  uuid            String       @default(uuid())
  email           String       @unique
  emailVerified   Boolean      @default(false)
  emailVerifyCode String?      @db.VarChar(10)
  username        String       @unique @db.VarChar(20)
  nickname        String       @db.VarChar(50)
  bio             String?      @db.VarChar(255)
  birth           String?      @db.VarChar(10)
  country         String?      @db.VarChar(20)
  timearea        String?      @db.VarChar(10)
  role            Role         @default(USER)
  updatedAt       DateTime     @updatedAt
  createdAt       DateTime     @default(now())
  lastUseAt       DateTime?
  profileEmoji    String?      @db.VarChar(30) // Áî®Êà∑ËÆæÁΩÆÁöÑË°®ÊÉÖÁ¨¶Âè∑ÔºåÁî®Á©∫Ê†ºÂàÜÈöîÔºåÂ¶ÇÔºö"üåü üí≠ üåç üí¨"
  gender          Gender?      @default(UNSET)
  password        String
  exp             Int          @default(0)
  followed        FriendShip[] @relation("Followed")
  following       FriendShip[] @relation("Following")
  notice          Notice[]
  // messageSend    Message[]    @relation("MessageFrom")
  // messageReceive Message[]    @relation("MessageTo")
  post            Post[]
  reply           Reply[]
  avatar          Avatar[]
  likes           Like[]
}

model Post {
  id          Int      @id @default(autoincrement())
  published   Boolean  @default(false)
  originLang  String?  @db.VarChar(10)
  User        User?    @relation(fields: [userUid], references: [uid])
  userUid     Int?
  updatedAt   DateTime @updatedAt
  lastReplyAt DateTime @default(now())
  createdAt   DateTime @default(now())
  title       String   @db.VarChar(50)
  origin      String   @db.VarChar(1000)
  titleZHCN   String?  @db.Text
  contentZHCN String?  @db.Text
  titleENUS   String?  @db.Text
  contentENUS String?  @db.Text
  titleZHTW   String?  @db.Text
  contentZHTW String?  @db.Text
  titleESES   String?  @db.Text
  contentESES String?  @db.Text
  titleFRFR   String?  @db.Text
  contentFRFR String?  @db.Text
  titleRURU   String?  @db.Text
  contentRURU String?  @db.Text
  titleJAJP   String?  @db.Text
  contentJAJP String?  @db.Text
  titleDEDE   String?  @db.Text
  contentDEDE String?  @db.Text
  titlePTBR   String?  @db.Text
  contentPTBR String?  @db.Text
  titleKOKR   String?  @db.Text
  contentKOKR String?  @db.Text

  Reply  Reply[]
  topics Topic[] @relation("PostTopics")
  likes  Like[]
}

model Like {
  uuid      String   @id @default(uuid())
  user      User     @relation(fields: [userUid], references: [uid])
  userUid   Int
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  reply     Reply?   @relation(fields: [replyId], references: [id])
  replyId   String?
  createdAt DateTime @default(now())
}

model Topic {
  name               String         @id @db.VarChar(30)
  emoji              String         @db.VarChar(5)
  index              Int            @default(0)
  posts              Post[]         @relation("PostTopics")
  nameZHCN           String?        @db.VarChar(30)
  nameENUS           String?        @db.VarChar(30)
  nameZHTW           String?        @db.VarChar(30)
  nameESES           String?        @db.VarChar(30)
  nameFRFR           String?        @db.VarChar(30)
  nameRURU           String?        @db.VarChar(30)
  nameJAJP           String?        @db.VarChar(30)
  nameDEDE           String?        @db.VarChar(30)
  namePTBR           String?        @db.VarChar(30)
  nameKOKR           String?        @db.VarChar(30)
  classificationName String         @db.VarChar(30)
  Classification     Classification @relation(fields: [classificationName], references: [name])
}

model Classification {
  name      String   @id @db.VarChar(30)
  index     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topics    Topic[]
  nameZHCN  String?  @db.VarChar(30)
  nameENUS  String?  @db.VarChar(30)
  nameZHTW  String?  @db.VarChar(30)
  nameESES  String?  @db.VarChar(30)
  nameFRFR  String?  @db.VarChar(30)
  nameRURU  String?  @db.VarChar(30)
  nameJAJP  String?  @db.VarChar(30)
  nameDEDE  String?  @db.VarChar(30)
  namePTBR  String?  @db.VarChar(30)
  nameKOKR  String?  @db.VarChar(30)
}

model Reply {
  id          String   @id @default(uuid())
  content     String   @db.VarChar(1000)
  contentZHCN String?  @db.Text
  contentENUS String?  @db.Text
  contentZHTW String?  @db.Text
  contentESES String?  @db.Text
  contentFRFR String?  @db.Text
  contentRURU String?  @db.Text
  contentJAJP String?  @db.Text
  contentDEDE String?  @db.Text
  contentPTBR String?  @db.Text
  contentKOKR String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  postUid     Int?
  noteUid     String?
  commentUid  String?
  userUid     Int
  likeUserUid Int[]
  post        Post?    @relation(fields: [postUid], references: [id])
  user        User     @relation(fields: [userUid], references: [uid])
  parentReply Reply?   @relation("CommentReplies", fields: [commentUid], references: [id])
  replies     Reply[]  @relation("CommentReplies")
  childReplay Boolean  @default(false)
  likes       Like[]
}

model Task {
  id        String   @id @default(uuid())
  status    String   @default("PENDING") @db.VarChar(20)
  createdAt DateTime @default(now())
}

model Avatar {
  id         String @id @default(uuid())
  user       User   @relation(fields: [userUid], references: [uid])
  userUid    Int
  emoji      String @db.VarChar(10)
  background String @db.VarChar(100)
}

model FriendShip {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("Followed", fields: [followerId], references: [uid])
  followerId  Int
  following   User     @relation("Following", fields: [followingId], references: [uid])
  followingId Int
  createdAt   DateTime @default(now())
}

model Notice {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [uid])
  userId    Int
  content   String   @db.VarChar(255)
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum Gender {
  MALE
  FEMALE
  INTERSEX
  UNSET
}
